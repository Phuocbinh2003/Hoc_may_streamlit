import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from scipy.stats import zscore

# H√†m ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
def tien_xu_ly_du_lieu(updates_file=None):
    if updates_file is not None:
        # ƒê·ªçc file upload t·ª´ ng∆∞·ªùi d√πng
        df = pd.read_csv(updates_file)
    else:
        # Gi·∫£ s·ª≠ b·∫°n c√≥ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        X = np.load('/mnt/data/alphabet_X.npy', allow_pickle=True)
        y = np.load('/mnt/data/alphabet_y.npy', allow_pickle=True)
        df = pd.DataFrame(X, columns=["Feature_" + str(i) for i in range(X.shape[1])])
        df['Target'] = y

    # Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu g·ªëc
    st.write("üìä **D·ªØ li·ªáu g·ªëc**:")
    st.write(df.head(10))

    # Ki·ªÉm tra c√°c gi√° tr·ªã thi·∫øu
    missing_values = df.isnull().sum()
    st.write("üîç **Ki·ªÉm tra gi√° tr·ªã thi·∫øu**:")
    st.write(missing_values)

    # Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
    duplicate_count = df.duplicated().sum()
    st.write(f"üîÅ **S·ªë l∆∞·ª£ng d√≤ng b·ªã tr√πng l·∫∑p**: {duplicate_count}")

    # Ki·ªÉm tra outliers (S·ª≠ d·ª•ng Z-score)
    outlier_count = {
        col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
        for col in df.select_dtypes(include=['number']).columns
    }
    st.write("üö® **Outliers** (Z-score > 3):")
    st.write(outlier_count)

    # X·ª≠ l√Ω c√°c c·ªôt ki·ªÉu ch·ªØ (alphabet) b·∫±ng LabelEncoder
    label_encoder = LabelEncoder()
    for column in df.select_dtypes(include=['object']).columns:
        df[column] = label_encoder.fit_transform(df[column])

    # Ti·ªÅn x·ª≠ l√Ω c√°c gi√° tr·ªã thi·∫øu
    df['Target'] = df['Target'].fillna(df['Target'].mode()[0])  # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng gi√° tr·ªã mode
    df.dropna(inplace=True)  # Lo·∫°i b·ªè c√°c d√≤ng ch·ª©a gi√° tr·ªã thi·∫øu n·∫øu c·∫ßn

    # Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë
    scaler = StandardScaler()
    df[df.select_dtypes(include=[np.number]).columns] = scaler.fit_transform(df.select_dtypes(include=[np.number]))

    # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi ti·ªÅn x·ª≠ l√Ω
    st.write("‚úÖ **D·ªØ li·ªáu sau khi ti·ªÅn x·ª≠ l√Ω**:")
    st.write(df.head(10))

    return df

# H√†m ƒë·ªÉ hi·ªÉn th·ªã v√† ti·ªÅn x·ª≠ l√Ω
def show_preprocessing_tab():
    st.title("üîç Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu - Alphabet")

    # Upload file d·ªØ li·ªáu
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file d·ªØ li·ªáu (.csv ho·∫∑c .txt)", type=["csv", "txt"])
    if uploaded_file is not None:
        df = tien_xu_ly_du_lieu(uploaded_file)
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n t·ªáp d·ªØ li·ªáu ƒë·ªÉ ti·∫øn h√†nh ti·ªÅn x·ª≠ l√Ω!")

# G·ªçi h√†m trong Streamlit
if __name__ == "__main__":
    show_preprocessing_tab()
