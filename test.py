import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from scipy.stats import zscore

# H√†m hi·ªÉn th·ªã gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc
def show_explanations():
    st.markdown("""
    ## üìö Gi·∫£i th√≠ch Quy tr√¨nh Ti·ªÅn x·ª≠ l√Ω
    
    1. **T·∫£i d·ªØ li·ªáu**: Nh·∫≠p t·∫≠p tin ·∫£nh (.npy) v√† nh√£n t∆∞∆°ng ·ª©ng
    2. **Ki·ªÉm tra k√≠ch th∆∞·ªõc**: ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng ·∫£nh v√† nh√£n kh·ªõp nhau
    3. **L√†m ph·∫≥ng ·∫£nh**: Chuy·ªÉn ·∫£nh 2D (28x28) th√†nh vector 1D (784 pixel)
    4. **M√£ h√≥a nh√£n**: Chuy·ªÉn ƒë·ªïi nh√£n ch·ªØ c√°i th√†nh s·ªë nguy√™n
    5. **Chu·∫©n h√≥a d·ªØ li·ªáu**: ƒê∆∞a gi√° tr·ªã pixel v·ªÅ kho·∫£ng [0,1]
    6. **Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng**: Ki·ªÉm tra outliers v√† ·∫£nh h·ªèng
    7. **Tr·ª±c quan h√≥a**: Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω
    """)

# H√†m hi·ªÉn th·ªã ·∫£nh m·∫´u
def display_sample_images(X, y, n_rows=3, n_cols=5):
    st.subheader("üñºÔ∏è Gallery ·∫¢nh M·∫´u")
    fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 8))
    
    for i in range(n_rows*n_cols):
        row = i // n_cols
        col = i % n_cols
        idx = np.random.randint(0, len(X))
        
        axes[row,col].imshow(X[idx].reshape(28,28), cmap='gray')
        axes[row,col].set_title(f"Label: {y[idx]}", fontsize=8)
        axes[row,col].axis('off')
    
    plt.tight_layout()
    st.pyplot(fig)

# H√†m ph√¢n t√≠ch ph√¢n ph·ªëi pixel
def analyze_pixel_distribution(df):
    st.subheader("üìà Ph√¢n ph·ªëi Gi√° tr·ªã Pixel")
    
    plt.figure(figsize=(10, 4))
    
    # Tr∆∞·ªõc chu·∫©n h√≥a
    plt.subplot(1, 2, 1)
    plt.hist(df.values.flatten(), bins=50, color='blue', alpha=0.7)
    plt.title('Ph√¢n ph·ªëi g·ªëc')
    plt.xlabel('Gi√° tr·ªã pixel')
    plt.ylabel('T·∫ßn su·∫•t')

    # Sau chu·∫©n h√≥a
    plt.subplot(1, 2, 2)
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(df.values)
    plt.hist(scaled_data.flatten(), bins=50, color='green', alpha=0.7)
    plt.title('Sau chu·∫©n h√≥a')
    plt.xlabel('Gi√° tr·ªã pixel (0-1)')
    
    plt.tight_layout()
    st.pyplot(plt)

def main():
    st.title("üî† Ti·ªÅn X·ª≠ l√Ω ·∫¢nh Ch·ªØ c√°i N√¢ng cao")
    show_explanations()
    
    # T·∫£i l√™n d·ªØ li·ªáu
    with st.expander("üì§ T·∫£i l√™n D·ªØ li·ªáu", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            X_file = st.file_uploader("Ch·ªçn file ·∫£nh (.npy)", type="npy")
        with col2:
            y_file = st.file_uploader("Ch·ªçn file nh√£n (.npy)", type="npy")

    if X_file and y_file:
        try:
            # ƒê·ªçc d·ªØ li·ªáu
            X = np.load(X_file)
            y = np.load(y_file).astype(str)
            
            # Validation
            if len(X) != len(y):
                st.error(f"L·ªói: S·ªë l∆∞·ª£ng ·∫£nh ({len(X)}) v√† nh√£n ({len(y)}) kh√¥ng kh·ªõp!")
                return

            # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
            st.subheader("üì¶ Th√¥ng tin Dataset")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªïng s·ªë m·∫´u", len(X))
            with col2:
                st.metric("K√≠ch th∆∞·ªõc ·∫£nh", f"{X.shape[1:] if X.ndim==3 else X.shape[1]}")
            with col3:
                unique_labels = np.unique(y)
                st.metric("S·ªë l·ªõp", len(unique_labels))

            # Hi·ªÉn th·ªã ·∫£nh m·∫´u
            display_sample_images(X, y)
            
            # Ph√¢n t√≠ch ph√¢n ph·ªëi pixel
            analyze_pixel_distribution(X.reshape(X.shape[0], -1))

            # X·ª≠ l√Ω d·ªØ li·ªáu
            with st.status("‚è≥ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...", expanded=True) as status:
                st.write("1. L√†m ph·∫≥ng ·∫£nh...")
                X_flat = X.reshape(X.shape[0], -1)
                
                st.write("2. M√£ h√≥a nh√£n...")
                le = LabelEncoder()
                y_encoded = le.fit_transform(y)
                
                st.write("3. Chu·∫©n h√≥a pixel...")
                scaler = MinMaxScaler()
                X_scaled = scaler.fit_transform(X_flat)
                
                st.write("4. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng...")
                df = pd.DataFrame(X_scaled, columns=[f"pixel_{i}" for i in range(X_scaled.shape[1])])
                df['label'] = y_encoded
                
                status.update(label="X·ª≠ l√Ω ho√†n t·∫•t!", state="complete")

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.subheader("‚úÖ K·∫øt qu·∫£ X·ª≠ l√Ω")
            tab1, tab2, tab3 = st.tabs(["D·ªØ li·ªáu", "Nh√£n", "Th·ªëng k√™"])
            
            with tab1:
                st.dataframe(df.head(), use_container_width=True)
                
            with tab2:
                label_map = pd.DataFrame({
                    "K√Ω t·ª±": le.classes_,
                    "M√£ s·ªë": le.transform(le.classes_)
                })
                st.dataframe(label_map, hide_index=True)
                
            with tab3:
                st.write("**Ph√¢n ph·ªëi l·ªõp:**")
                label_dist = pd.Series(y).value_counts().reset_index()
                label_dist.columns = ['K√Ω t·ª±', 'S·ªë l∆∞·ª£ng']
                st.bar_chart(label_dist.set_index('K√Ω t·ª±'))
            
            # T·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i xu·ªëng Dataset ƒë√£ x·ª≠ l√Ω",
                data=df.to_csv(index=False).encode(),
                file_name="processed_alphabet.csv",
                mime="text/csv"
            )

        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω: {str(e)}")
    else:
        st.info("üëâ Vui l√≤ng t·∫£i l√™n c·∫£ file ·∫£nh v√† file nh√£n ƒë·ªÉ b·∫Øt ƒë·∫ßu")

if __name__ == "__main__":
    main()