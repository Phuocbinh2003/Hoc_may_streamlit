import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from scipy.stats import zscore
import matplotlib.pyplot as plt

def preprocess_alphabet_data(X, y):
    # Ti·ªÅn x·ª≠ l√Ω cho d·ªØ li·ªáu ·∫£nh ch·ªØ c√°i
    if X.ndim == 3:
        X = X.reshape(X.shape[0], -1)  # Flatten ·∫£nh 28x28 -> 784 pixels
    
    # T·∫°o DataFrame
    df = pd.DataFrame(X, columns=[f"pixel_{i}" for i in range(X.shape[1])])
    df['label'] = y  # Gi·∫£ s·ª≠ nh√£n l√† c√°c ch·ªØ c√°i A-Z
    
    # Hi·ªÉn th·ªã th·ªëng k√™
    st.write("üìä **Th√¥ng tin dataset**:")
    st.write(f"- S·ªë l∆∞·ª£ng m·∫´u: {len(df)}")
    st.write(f"- S·ªë l·ªõp: {len(np.unique(y))}")
    
    # Hi·ªÉn th·ªã v√≠ d·ª• ·∫£nh
    st.write("üñºÔ∏è **V√≠ d·ª• d·ªØ li·ªáu ·∫£nh**:")
    sample_idx = np.random.randint(0, len(X))
    plt.imshow(X[sample_idx].reshape(28, 28), cmap='gray')
    plt.axis('off')
    st.pyplot(plt)
    
    # X·ª≠ l√Ω nh√£n ch·ªØ c√°i
    le = LabelEncoder()
    df['label'] = le.fit_transform(df['label'])
    
    # L∆∞u √°nh x·∫° nh√£n
    label_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
    st.write("üî° **√Ånh x·∫° nh√£n**:", label_mapping)

    # Chu·∫©n h√≥a pixel values v·ªÅ [0, 1]
    scaler = MinMaxScaler()
    pixel_columns = [col for col in df.columns if col.startswith('pixel')]
    df[pixel_columns] = scaler.fit_transform(df[pixel_columns])
    
    # Ph√°t hi·ªán outliers (ƒë·∫∑c th√π ·∫£nh)
    st.write("üîç **Ph√¢n t√≠ch pixel**:")
    pixel_stats = df[pixel_columns].agg(['mean', 'std', 'min', 'max'])
    st.write(pixel_stats)
    
    # Lo·∫°i b·ªè ·∫£nh h·ªèng (n·∫øu c√≥)
    corrupted_images = df[(df[pixel_columns] < 0).any(axis=1) | (df[pixel_columns] > 1).any(axis=1)]
    if not corrupted_images.empty:
        st.warning(f"‚ö†Ô∏è Ph√°t hi·ªán {len(corrupted_images)} ·∫£nh h·ªèng, ƒëang lo·∫°i b·ªè...")
        df = df.drop(corrupted_images.index)
    
    return df, le

def main():
    st.title("üéØ Ti·ªÅn x·ª≠ l√Ω ·∫¢nh Ch·ªØ c√°i")
    
    # T·∫£i l√™n d·ªØ li·ªáu
    col1, col2 = st.columns(2)
    with col1:
        X_file = st.file_uploader("T·∫£i l√™n file ·∫£nh (.npy)", type="npy")
    with col2:
        y_file = st.file_uploader("T·∫£i l√™n file nh√£n (.npy)", type="npy")
    
    if X_file and y_file:
        try:
            X = np.load(X_file)
            y = np.load(y_file)
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc
            if len(X) != len(y):
                st.error("L·ªói: S·ªë l∆∞·ª£ng ·∫£nh v√† nh√£n kh√¥ng kh·ªõp!")
                return
                
            # X·ª≠ l√Ω d·ªØ li·ªáu
            df, label_encoder = preprocess_alphabet_data(X, y)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.write("‚úÖ **D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω**:")
            st.dataframe(df.head())
            
            # T·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu",
                data=df.to_csv().encode(),
                file_name="alphabet_processed.csv",
                mime="text/csv"
            )
            
        except Exception as e:
            st.error(f"L·ªói x·ª≠ l√Ω: {str(e)}")
    else:
        st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i l√™n c·∫£ file ·∫£nh v√† file nh√£n")

if __name__ == "__main__":
    main()