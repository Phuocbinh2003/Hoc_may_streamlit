import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import mlflow
import plotly.express as px
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
import os
# H√†m kh·ªüi t·∫°o MLflow
def init_mlflow():
    mlflow.set_tracking_uri("https://dagshub.com/Phuocbinh2003/Hoc_may_python.mlflow")
    os.environ["MLFLOW_TRACKING_USERNAME"] = "Phuocbinh2003"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "c1495823c8f9156923b06f15899e989db7e62052"
    mlflow.set_experiment("Pseudo_Label_MNIST")

# Tab L√Ω thuy·∫øt
def theory_tab():
    st.markdown("""
    ## üìö L√Ω thuy·∫øt Pseudo Labelling
    **Pseudo Labelling** l√† k·ªπ thu·∫≠t semi-supervised learning k·∫øt h·ª£p d·ªØ li·ªáu c√≥ nh√£n v√† kh√¥ng nh√£n:
    
    1. Hu·∫•n luy·ªán model ban ƒë·∫ßu tr√™n t·∫≠p nh√£n nh·ªè
    2. D·ª± ƒëo√°n nh√£n cho d·ªØ li·ªáu ch∆∞a g√°n nh√£n
    3. Ch·ªçn c√°c d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y cao l√†m pseudo labels
    4. Hu·∫•n luy·ªán l·∫°i model v·ªõi d·ªØ li·ªáu m·ªü r·ªông
    5. L·∫∑p l·∫°i qu√° tr√¨nh cho ƒë·∫øn khi h·ªôi t·ª•

    **C√¥ng th·ª©c ch·ªçn pseudo labels:**
    """)
    
    st.latex(r'''
    \text{Ch·ªçn m·∫´u } x_i \text{ n·∫øu } \max(p(y|x_i)) \geq \tau
    ''')
    st.write("Trong ƒë√≥ œÑ l√† ng∆∞·ª°ng tin c·∫≠y (v√≠ d·ª•: 0.95)")

# Tab Th√≠ nghi·ªám
def experiment_tab():
    st.title("üî¨ Th√≠ nghi·ªám Pseudo Labelling")
    
    # T·∫£i d·ªØ li·ªáu
    X, y = fetch_openml('mnist_784', version=1, return_X_y=True, parser='auto')
    X = X / 255.0
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Sidebar controls
    with st.sidebar:
        st.header("‚öôÔ∏è Tham s·ªë")
        init_ratio = st.slider("T·ª∑ l·ªá d·ªØ li·ªáu ban ƒë·∫ßu (%)", 1, 10, 1)
        threshold = st.slider("Ng∆∞·ª°ng tin c·∫≠y", 0.7, 0.99, 0.95)
        max_iter = st.slider("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", 1, 20, 5)
        n_units = st.slider("S·ªë n∆°-ron l·ªõp ·∫©n", 64, 512, 128)
        
    # Kh·ªüi t·∫°o MLflow
    init_mlflow()
    run_name = st.text_input("T√™n th√≠ nghi·ªám:", "Pseudo_Label_Exp")
    
    if st.button("B·∫Øt ƒë·∫ßu th√≠ nghi·ªám"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            with mlflow.start_run(run_name=run_name):
                # Log parameters
                mlflow.log_params({
                    "init_ratio": init_ratio,
                    "threshold": threshold,
                    "max_iter": max_iter,
                    "n_units": n_units
                })
                
                # Ch·ªçn d·ªØ li·ªáu ban ƒë·∫ßu (1%)
                sss = StratifiedShuffleSplit(n_splits=1, test_size=1-init_ratio/100, random_state=42)
                for train_idx, _ in sss.split(X_train, y_train):
                    X_labeled = X_train[train_idx]
                    y_labeled = y_train[train_idx]
                    X_unlabeled = np.delete(X_train, train_idx, axis=0)
                
                history = {
                    'acc': [],
                    'pseudo_counts': [],
                    'test_acc': []
                }
                
                # V√≤ng l·∫∑p Pseudo Label
                for iter in range(max_iter):
                    # Hu·∫•n luy·ªán model
                    model = Sequential([
                        Dense(n_units, activation='relu', input_shape=(784,)),
                        Dropout(0.2),
                        Dense(10, activation='softmax')
                    ])
                    model.compile(Adam(0.001), 'sparse_categorical_crossentropy', metrics=['accuracy'])
                    
                    model.fit(X_labeled, y_labeled.astype(int), 
                             epochs=10, 
                             batch_size=128, 
                             verbose=0,
                             validation_split=0.2)
                    
                    # D·ª± ƒëo√°n tr√™n t·∫≠p unlabeled
                    probas = model.predict(X_unlabeled, verbose=0)
                    pseudo_labels = np.argmax(probas, axis=1)
                    max_probs = np.max(probas, axis=1)
                    
                    # Ch·ªçn m·∫´u ƒë·∫°t ng∆∞·ª°ng
                    mask = max_probs >= threshold
                    X_selected = X_unlabeled[mask]
                    y_selected = pseudo_labels[mask]
                    
                    # C·∫≠p nh·∫≠t d·ªØ li·ªáu
                    X_labeled = np.vstack([X_labeled, X_selected])
                    y_labeled = np.concatenate([y_labeled, y_selected])
                    X_unlabeled = X_unlabeled[~mask]
                    
                    # ƒê√°nh gi√°
                    test_loss, test_acc = model.evaluate(X_test, y_test.astype(int), verbose=0)
                    
                    # L∆∞u l·ªãch s·ª≠
                    history['acc'].append(test_acc)
                    history['pseudo_counts'].append(len(X_selected))
                    history['test_acc'].append(test_acc)
                    
                    # Log metrics
                    mlflow.log_metrics({
                        f"iteration_{iter}_test_acc": test_acc,
                        f"iteration_{iter}_pseudo_added": len(X_selected)
                    }, step=iter)
                    
                    # Ki·ªÉm tra d·ª´ng
                    if len(X_unlabeled) == 0:
                        break
                
                # Visualization
                fig1 = px.line(
                    
                    x=list(range(1, len(history['acc'])+1),
                    y=history['acc'],
                    labels={'x': 'V√≤ng l·∫∑p', 'y': 'ƒê·ªô ch√≠nh x√°c'},
                    title='ƒê·ªô ch√≠nh x√°c qua c√°c v√≤ng l·∫∑p'
                )
                )
                st.plotly_chart(fig1)
                
                fig2 = px.bar(
                    x=list(range(1, len(history['pseudo_counts'])+1),
                    y=history['pseudo_counts'],
                    labels={'x': 'V√≤ng l·∫∑p', 'y': 'S·ªë m·∫´u th√™m v√†o'},
                    title='S·ªë l∆∞·ª£ng pseudo labels th√™m m·ªói v√≤ng'
                    )
                )
                st.plotly_chart(fig2)
                
# Tab Demo
def demo_tab():
    st.title("üé® Demo Tr·ª±c quan")
    
    # Load sample data
    X, y = fetch_openml('mnist_784', version=1, return_X_y=True, parser='auto')
    sample_idx = np.random.choice(len(X), 5, replace=False)
    
    cols = st.columns(5)
    for i, col in enumerate(cols):
        with col:
            plt.imshow(X[sample_idx[i]].reshape(28, 28), cmap='gray')
            plt.axis('off')
            st.pyplot(plt)
            st.write(f"Nh√£n th·∫≠t: {y[sample_idx[i]]}")

# Main App
def main():
    st.set_page_config(page_title="Pseudo Labelling MNIST", page_icon="üîñ")
    
    tab1, tab2, tab3 = st.tabs(["üìö L√Ω thuy·∫øt", "üî¨ Th√≠ nghi·ªám", "üé® Demo"])
    
    with tab1:
        theory_tab()
    
    with tab2:
        experiment_tab()
    
    with tab3:
        demo_tab()

if __name__ == "__main__":
    main()