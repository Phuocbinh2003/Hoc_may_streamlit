import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.datasets import fetch_openml

@st.cache_data
def load_mnist():
    """T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML"""
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data, mnist.target
    return X, y.astype(int)

st.title("üìâ Gi·∫£m chi·ªÅu d·ªØ li·ªáu MNIST v·ªõi PCA & t-SNE")

# Load d·ªØ li·ªáu
X, y = load_mnist()

# T√πy ch·ªçn thu·∫≠t to√°n
method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu", ["PCA", "t-SNE"])
n_components = st.slider("S·ªë chi·ªÅu gi·∫£m xu·ªëng", 2, 3, 2)

# N√∫t ch·∫°y thu·∫≠t to√°n
if st.button("üöÄ Ch·∫°y gi·∫£m chi·ªÅu"):
    with st.spinner("ƒêang x·ª≠ l√Ω..."):
        if method == "PCA":
            reducer = PCA(n_components=n_components)
        else:
            reducer = TSNE(n_components=n_components, perplexity=30, random_state=42)

        X_reduced = reducer.fit_transform(X[:5000])  # Ch·ªâ d√πng 5000 ·∫£nh ƒë·ªÉ tƒÉng t·ªëc

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        fig, ax = plt.subplots(figsize=(6, 6))
        scatter = ax.scatter(X_reduced[:, 0], X_reduced[:, 1], c=y[:5000], cmap="jet", alpha=0.5)
        ax.set_title(f"{method} gi·∫£m chi·ªÅu xu·ªëng {n_components}D")
        st.pyplot(fig)

st.success("Ho√†n th√†nh!")
