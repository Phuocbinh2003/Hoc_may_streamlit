import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# T·∫£i d·ªØ li·ªáu


def phan_gioi_thieu():
    uploaded_file = "buoi2/data.txt"
    try:
        df = pd.read_csv(uploaded_file, delimiter=",")
    except FileNotFoundError:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        st.stop()
    
    st.title("üîç Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
    st.subheader("üìå 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
    st.write(df.head(10))
    st.header("‚öôÔ∏è C√°c b∆∞·ªõc ch√≠nh trong ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
    st.subheader("1Ô∏è‚É£ Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt")
    st.write("""
        M·ªôt s·ªë c·ªôt trong d·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ d·ª± ƒëo√°n ho·∫∑c ch·ª©a qu√° nhi·ªÅu gi√° tr·ªã thi·∫øu. Ch√∫ng ta s·∫Ω lo·∫°i b·ªè c√°c c·ªôt nh∆∞:
        - **Cabin**: C·ªôt n√†y c√≥ qu√° nhi·ªÅu gi√° tr·ªã b·ªã thi·∫øu.
        - **Ticket**: M√£ v√© kh√¥ng mang nhi·ªÅu th√¥ng tin h·ªØu √≠ch.
        - **Name**:  Kh√¥ng c·∫ßn thi·∫øt cho b√†i to√°n d·ª± ƒëo√°n s·ªëng s√≥t.
        ```python
            columns_to_drop = ["Cabin", "Ticket", "Name"]  
            df.drop(columns=columns_to_drop, inplace=True)
        ```
        """)
    columns_to_drop = ["Cabin", "Ticket", "Name"]  # C·ªôt kh√¥ng c·∫ßn thi·∫øt
    df.drop(columns=columns_to_drop, inplace=True)  # Lo·∫°i b·ªè c·ªôt

    st.subheader("2Ô∏è‚É£ X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")
    st.write("""
        D·ªØ li·ªáu th·ª±c t·∫ø th∆∞·ªùng c√≥ gi√° tr·ªã b·ªã thi·∫øu. Ta c·∫ßn x·ª≠ l√Ω ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh.
        - **C·ªôt "Age"**: ƒêi·ªÅn gi√° tr·ªã trung b√¨nh v√¨ ƒë√¢y l√† d·ªØ li·ªáu s·ªë.
        - **C·ªôt "Fare"**: ƒêi·ªÅn gi√° tr·ªã trung v·ªã ƒë·ªÉ gi·∫£m ·∫£nh h∆∞·ªüng c·ªßa ngo·∫°i lai.
        - **C·ªôt "Embarked"**:   X√≥a c√°c d√≤ng b·ªã thi·∫øu v√¨ s·ªë l∆∞·ª£ng √≠t.
        ```python
            df["Age"].fillna(df["Age"].mean(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung b√¨nh cho "Age"
            df["Fare"].fillna(df["Fare"].median(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung v·ªã cho "Fare"
            df.dropna(subset=["Embarked"], inplace=True)  # X√≥a d√≤ng thi·∫øu "Embarked"

        ```
        """)
    df["Age"].fillna(df["Age"].mean(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung b√¨nh
    df["Fare"].fillna(df["Fare"].median(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung v·ªã
    df.dropna(subset=["Embarked"], inplace=True)  # X√≥a d√≤ng thi·∫øu Embarked

    st.subheader("3Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    st.write("""
        Trong d·ªØ li·ªáu, c√≥ m·ªôt s·ªë c·ªôt ch·ª©a gi√° tr·ªã d·∫°ng ch·ªØ (category). Ta c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh d·∫°ng s·ªë ƒë·ªÉ m√¥ h√¨nh c√≥ th·ªÉ x·ª≠ l√Ω.
        - **C·ªôt "Sex"**: Chuy·ªÉn th√†nh 1 (Nam), 0 (N·ªØ).
        - **C·ªôt "Embarked"**:   D√πng One-Hot Encoding ƒë·ªÉ t·∫°o c√°c c·ªôt m·ªõi cho t·ª´ng gi√° tr·ªã ("S", "C", "Q").
        ```python
            df["Sex"] = df["Sex"].map({"male": 1, "female": 0})  # M√£ h√≥a gi·ªõi t√≠nh
            df = pd.get_dummies(df, columns=["Embarked"], drop_first=True)  # One-Hot Encoding


        ```
        """)
    df["Sex"] = df["Sex"].map({"male": 1, "female": 0})  # M√£ h√≥a gi·ªõi t√≠nh
    df = pd.get_dummies(df, columns=["Embarked"], drop_first=True)  # One-Hot Encoding


    st.subheader("4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë")
    st.write("""
        C√°c gi√° tr·ªã s·ªë c√≥ th·ªÉ c√≥ kho·∫£ng gi√° tr·ªã kh√°c nhau, l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh. Ta s·∫Ω chu·∫©n h√≥a "Age" v√† "Fare" v·ªÅ c√πng m·ªôt thang ƒëo b·∫±ng StandardScaler.
        ```python
            scaler = StandardScaler()
            df[["Age", "Fare"]] = scaler.fit_transform(df[["Age", "Fare"]])

        ```
        """)
    scaler = StandardScaler()
    df[["Age", "Fare"]] = scaler.fit_transform(df[["Age", "Fare"]])

    st.write("D·ªØ li·ªáu sau khi x·ª≠ l√Ω:")
    st.write(df.head(10))

    st.subheader("5Ô∏è‚É£ Chia d·ªØ li·ªáu th√†nh t·∫≠p Train, Validation, v√† Test")
    st.write("""
        D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh ba ph·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o m√¥ h√¨nh t·ªïng qu√°t t·ªët:
        - **70%**: ƒë·ªÉ train m√¥ h√¨nh.
        - **15%**: ƒë·ªÉ validation, d√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh tham s·ªë.
        - **15%"**:   ƒë·ªÉ test, ƒë√°nh gi√° hi·ªáu su·∫•t th·ª±c t·∫ø.
        ```python
            # Chia d·ªØ li·ªáu theo t·ª∑ l·ªá 70% v√† 30% (train - temp)
            X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)

            # Chia ti·∫øp 30% th√†nh 15% validation v√† 15% test
            X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

        ```
        """)
    X = df.drop(columns=["Survived"])  # Bi·∫øn ƒë·∫ßu v√†o
    y = df["Survived"]  # Nh√£n
    X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)

    # Chia ti·∫øp 30% th√†nh 15% validation v√† 15% test
    X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

    st.write("üìå S·ªë l∆∞·ª£ng m·∫´u trong t·ª´ng t·∫≠p d·ªØ li·ªáu:")
    st.write(f"üëâ Train: {X_train.shape[0]} m·∫´u")
    st.write(f"üëâ Validation: {X_val.shape[0]} m·∫´u")
    st.write(f"üëâ Test: {X_test.shape[0]} m·∫´u")
    
    return df, X_train, X_val, X_test, y_train, y_val, y_test
def phan_train(X_train, y_train, X_val, y_val, X_test, y_test):
    st.title("üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh")
    st.subheader(" m√¥ h√¨nh Random Forest")
    st.write(f"""
        M√¥ h√¨nh Random Forest l√† m·ªôt m√¥ h√¨nh m·∫°nh m·∫Ω v√† linh ho·∫°t, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c b√†i to√°n ph√¢n lo·∫°i v√† h·ªìi quy.
        ∆Øu ƒëi·ªÉm:   
        - X·ª≠ l√Ω t·ªët v·ªõi d·ªØ li·ªáu l·ªõn.
        - Kh√¥ng y√™u c·∫ßu chu·∫©n h√≥a d·ªØ li·ªáu.
        - D·ªÖ d√†ng x·ª≠ l√Ω overfitting.
        Nh∆∞·ª£c ƒëi·ªÉm:
        - Kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu c√≥ nhi·ªÅu gi√° tr·ªã thi·∫øu.
        - M·∫•t hi·ªáu su·∫•t khi s·ªë l∆∞·ª£ng c√¢y l·ªõn.
        - Kh√¥ng th·ªÉ hi·ªÉn th·ªã qu√° tr√¨nh h·ªçc.
        """)
    
    
    
    st.write("""
        ƒê·∫øn b∆∞·ªõc quan tr·ªçng nh·∫•t: hu·∫•n luy·ªán m√¥ h√¨nh. Ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng m√¥ h√¨nh Random Forest ƒë·ªÉ d·ª± ƒëo√°n kh·∫£ nƒÉng s·ªëng s√≥t tr√™n t√†u Titanic.
        ```python
            from sklearn.ensemble import RandomForestClassifier

            # Kh·ªüi t·∫°o m√¥ h√¨nh
            model = RandomForestClassifier(random_state=42)

            # Hu·∫•n luy·ªán m√¥ h√¨nh
            model.fit(X_train, y_train)

        ```
        """)
    

    # Kh·ªüi t·∫°o m√¥ h√¨nh
    model = RandomForestClassifier(random_state=42)

    # Hu·∫•n luy·ªán m√¥ h√¨nh
    model.fit(X_train, y_train)

    st.write("üéØ ƒê√°nh gi√° m√¥ h√¨nh b·∫±ng Cross-Validation")
    st.write("""
         Cross-Validation l√† m·ªôt k·ªπ thu·∫≠t ƒë√°nh gi√° m√¥ h√¨nh b·∫±ng c√°ch chia d·ªØ li·ªáu th√†nh nhi·ªÅu ph·∫ßn, hu·∫•n luy·ªán tr√™n m·ªôt ph·∫ßn v√† ƒë√°nh gi√° tr√™n ph·∫ßn c√≤n l·∫°i.
             
        ƒê·ªÉ ƒë√°nh gi√° m√¥ h√¨nh, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng k·ªπ thu·∫≠t Cross-Validation v·ªõi 5 fold (cv=5).
        ```python
            from sklearn.model_selection import cross_val_score

            # ƒê√°nh gi√° m√¥ h√¨nh b·∫±ng cross-validation
            cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')
            cv_scores
        ```
        
        """)
    cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')
    print(f"Cross-validation scores: {cv_scores}")
    print(f"Mean CV Accuracy: {cv_scores.mean():.4f}")
    model.fit(X_train, y_train)
    y_val_pred = model.predict(X_val)
    y_test_pred = model.predict(X_test)

    valid_acc = accuracy_score(y_val, y_val_pred)
    test_acc = accuracy_score(y_test, y_test_pred)

    st.write(f"‚úÖ Validation Accuracy: {valid_acc:.4f}")
    st.write(f"‚úÖ Test Accuracy: {test_acc:.4f}")

    # Hi·ªÉn th·ªã b√°o c√°o ph√¢n lo·∫°i
    st.write("üìä Classification Report (Validation):")
    st.text(classification_report(y_val, y_val_pred))
    return model, valid_acc, test_acc

def classification_report():
    
        
    X_train, X_val, X_test, y_train, y_val, y_test = phan_gioi_thieu()
    phan_train(X_train, y_train, X_val, y_val, X_test, y_test)

if __name__ == "__main__":
    classification_report()
