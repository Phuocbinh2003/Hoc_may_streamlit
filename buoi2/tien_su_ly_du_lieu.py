import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from scipy.stats import zscore
def hien_thi_ly_thuyet():
    st.title("üìä X·ª≠ l√Ω D·ªØ li·ªáu & Chia Train/Test/Validation")

    st.subheader("1Ô∏è‚É£ Gi·ªõi thi·ªáu v·ªÅ Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu")
    st.write("""
    Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu l√† m·ªôt b∆∞·ªõc quan tr·ªçng trong ph√¢n t√≠ch d·ªØ li·ªáu v√† h·ªçc m√°y. N√≥ gi√∫p d·ªØ li·ªáu tr·ªü n√™n s·∫°ch v√† ph√π h·ª£p h∆°n ƒë·ªÉ s·ª≠ d·ª•ng. 
    M·ªôt s·ªë v·∫•n ƒë·ªÅ ph·ªï bi·∫øn trong d·ªØ li·ªáu:
    - **Gi√° tr·ªã r·ªóng** (NaN, None)
    - **ƒê·ªãnh d·∫°ng kh√¥ng ƒë·ªìng nh·∫•t** (chu·ªói, s·ªë, ng√†y th√°ng)
    - **D·ªØ li·ªáu l·ªói** (gi√° tr·ªã √¢m, kh√¥ng h·ª£p l·ªá)
    - **D·ªØ li·ªáu tr√πng l·∫∑p**
    """)

    st.header("‚öôÔ∏è C√°c b∆∞·ªõc ch√≠nh trong ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
    st.image("buoi2\img1.png", caption="L√†m s·∫°ch d·ªØ li·ªáu", use_column_width=True)

    st.subheader("1Ô∏è‚É£ X·ª≠ l√Ω gi√° tr·ªã r·ªóng")
    st.write("""
    D·ªØ li·ªáu th∆∞·ªùng c√≥ nh·ªØng √¥ b·ªã thi·∫øu th√¥ng tin (NaN), c√≥ th·ªÉ x·ª≠ l√Ω theo nhi·ªÅu c√°ch:
    - **X√≥a d√≤ng/c·ªôt ch·ª©a gi√° tr·ªã r·ªóng**: D√πng `dropna()`
    - **ƒêi·ªÅn gi√° tr·ªã m·∫∑c ƒë·ªãnh**: D√πng `fillna()`
    - **D√πng trung b√¨nh, trung v·ªã, ho·∫∑c gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t**:  
      ```python
      df['column'].fillna(df['column'].mean())
      ```
    """)

    st.subheader("2Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    st.write("""
    M·ªôt s·ªë c·ªôt c√≥ th·ªÉ c·∫ßn chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu:
    - **Chuy·ªÉn c·ªôt s·ªë th√†nh d·∫°ng ph√¢n lo·∫°i**:  
      ```python
      df['Pclass'] = df['Pclass'].astype('category')
      ```
    - **M√£ h√≥a bi·∫øn ph√¢n lo·∫°i (v√≠ d·ª•: gi·ªõi t√≠nh)**:  
      ```python
      df['Sex'] = df['Sex'].map({'male': 1, 'female': 0})
      ```
    """)

    st.subheader("3Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu")
    st.write("""
    ƒê·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu c√≥ c√πng kho·∫£ng gi√° tr·ªã, ta chu·∫©n h√≥a b·∫±ng StandardScaler:
    ```python
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    df[['Fare']] = scaler.fit_transform(df[['Fare']])
    ```
    """)
    

    st.subheader("4Ô∏è‚É£ X·ª≠ l√Ω d·ªØ li·ªáu tr√πng l·∫∑p")
    st.write("""
    D·ªØ li·ªáu c√≥ th·ªÉ b·ªã tr√πng, g√¢y ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ ph√¢n t√≠ch:
    - **Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p**:  
      ```python
      df.duplicated().sum()
      ```
    - **X√≥a d·ªØ li·ªáu tr√πng l·∫∑p**:  
      ```python
      df = df.drop_duplicates()
      ```
    """)

    st.subheader("5Ô∏è‚É£ Chia d·ªØ li·ªáu th√†nh Train - Validation - Test")
    st.write("""
    D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh:
    - **T·∫≠p Train (70%)**: D√πng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.
    - **T·∫≠p Validation (15%)**: D√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh m√¥ h√¨nh.
    - **T·∫≠p Test (15%)**: Ki·ªÉm tra m√¥ h√¨nh v·ªõi d·ªØ li·ªáu m·ªõi.
    """)

def tien_xu_ly_du_lieu():
    # Upload file
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file d·ªØ li·ªáu (.csv ho·∫∑c .txt)", type=["csv", "txt"])

    if uploaded_file is None:
        hien_thi_ly_thuyet()  # Ch·ªâ hi·ªÉn th·ªã l√Ω thuy·∫øt n·∫øu ch∆∞a c√≥ file t·∫£i l√™n
    
    else:
        try:
            df = pd.read_csv(uploaded_file, delimiter=",")  # ƒêi·ªÅu ch·ªânh delimiter n·∫øu c·∫ßn

            # Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
            st.subheader("üìå 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
            st.write(df.head(10))

            # Ki·ªÉm tra l·ªói d·ªØ li·ªáu
            st.subheader("üö® Ki·ªÉm tra l·ªói d·ªØ li·ªáu")

            # Ki·ªÉm tra gi√° tr·ªã thi·∫øu
            missing_values = df.isnull().sum()

            # Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
            duplicate_count = df.duplicated().sum()

            # Ki·ªÉm tra gi√° tr·ªã √¢m (ch·ªâ hi·ªÉn th·ªã n·∫øu > 0)
            invalid_values = {
                col: (df[col] < 0).sum() for col in df.select_dtypes(include=['number']).columns
            }
            invalid_values = {k: v for k, v in invalid_values.items() if v > 0}  # B·ªè gi√° tr·ªã √¢m = 0

            # Ki·ªÉm tra gi√° tr·ªã qu√° l·ªõn (outlier) b·∫±ng Z-score
            outlier_count = {
                col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
                for col in df.select_dtypes(include=['number']).columns
            }

            # T·∫°o b√°o c√°o l·ªói
            error_report = pd.DataFrame({
                'C·ªôt': df.columns,
                'Gi√° tr·ªã thi·∫øu': missing_values,

                'Outlier': [outlier_count.get(col, 0) for col in df.columns]
            })

            # Hi·ªÉn th·ªã b√°o c√°o l·ªói
            st.table(error_report)

            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr√πng l·∫∑p
            st.write(f"üîÅ **S·ªë l∆∞·ª£ng d√≤ng b·ªã tr√πng l·∫∑p:** {duplicate_count}")

            # X·ª≠ l√Ω l·ªói d·ªØ li·ªáu
            if "Embarked" in df.columns:
                df.dropna(subset=['Embarked'], inplace=True)

            if "Age" in df.columns:
                df['Age'].fillna(df['Age'].mean(), inplace=True)
                df['Age'] = df['Age'].astype(int)

            if "Cabin" in df.columns:
                df['Cabin'].fillna('Unknown', inplace=True)

            if "Pclass" in df.columns:
                df['Pclass'] = df['Pclass'].astype('category')

            if "Sex" in df.columns:
                df['Sex'] = df['Sex'].map({'male': 1, 'female': 0})

            if "Fare" in df.columns and df['Fare'].nunique() > 1:
                scaler = StandardScaler()
                df[['Fare']] = scaler.fit_transform(df[['Fare']])

            # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi x·ª≠ l√Ω
            st.subheader("‚úÖ D·ªØ li·ªáu sau x·ª≠ l√Ω")
            st.write(df.head(10))

            # Chia d·ªØ li·ªáu: 70% train, 15% validation, 15% test
            train_df, temp_df = train_test_split(df, test_size=0.3, random_state=42)
            val_df, test_df = train_test_split(temp_df, test_size=0.5, random_state=42)

            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng m·∫´u
            st.subheader("üìä S·ªë l∆∞·ª£ng m·∫´u trong t·ª´ng t·∫≠p d·ªØ li·ªáu")
            summary_df = pd.DataFrame({
                "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
                "S·ªë l∆∞·ª£ng m·∫´u": [train_df.shape[0], val_df.shape[0], test_df.shape[0]]
            })
            st.table(summary_df)

        except Exception as e:
            st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

if __name__ == "__main__":
    tien_xu_ly_du_lieu()
