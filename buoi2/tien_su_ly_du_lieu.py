import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from scipy.stats import zscore
from PIL import Image

def drop(df):
    columns_to_drop = st.multiselect("Ch·ªçn c·ªôt mu·ªën x√≥a", df.columns.tolist())
    if columns_to_drop:
        df.drop(columns=columns_to_drop, inplace=True)
        st.write("### D·ªØ li·ªáu sau khi x√≥a c·ªôt:")
        st.dataframe(df.head())
    return df
def train_test_size(df):
    train_size = st.slider("Ch·ªçn % d·ªØ li·ªáu Train", 50, 90, 70)
    val_size = st.slider("Ch·ªçn % d·ªØ li·ªáu Validation", 0, 40, 15)
    test_size = 100 - train_size - val_size
    st.write(f"T·ª∑ l·ªá ph√¢n chia: Train={train_size}%, Validation={val_size}%, Test={test_size}%")
    # Chia d·ªØ li·ªáu: 70% train, 15% validation, 15% test
    train_data, temp_data = train_test_split(df, test_size=(100 - train_size)/100, random_state=42)
    val_data, test_data = train_test_split(temp_data, test_size=test_size/(test_size + val_size), random_state=42)
    st.subheader("üìä S·ªë l∆∞·ª£ng m·∫´u trong t·ª´ng t·∫≠p d·ªØ li·ªáu")
    summary_df = pd.DataFrame({
        "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
        "S·ªë l∆∞·ª£ng m·∫´u": [train_df.shape[0], val_df.shape[0], test_df.shape[0]]
    })
    st.table(summary_df)
def xu_ly_gia_tri_thieu(df):
    st.subheader("X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")
    
    if df.isnull().sum().sum() == 0:
        st.success("Kh√¥ng c√≥ gi√° tr·ªã thi·∫øu trong d·ªØ li·ªáu!")
        return df

    # Ch·ªçn c·ªôt c·∫ßn x·ª≠ l√Ω (ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt c√≥ gi√° tr·ªã thi·∫øu)
    missing_cols = df.columns[df.isnull().any()].tolist()
    selected_col = st.selectbox("Ch·ªçn c·ªôt ch·ª©a gi√° tr·ªã thi·∫øu:", missing_cols)

    # Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω
    method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω:", ["Thay th·∫ø b·∫±ng Mean", "Thay th·∫ø b·∫±ng Median", "X√≥a gi√° tr·ªã thi·∫øu"])

    # X·ª≠ l√Ω d·ªØ li·ªáu
    if method == "Thay th·∫ø b·∫±ng Mean":
        df[selected_col].fillna(df[selected_col].mean(), inplace=True)
        st.success(f"ƒê√£ thay th·∫ø gi√° tr·ªã thi·∫øu ·ªü c·ªôt '{selected_col}' b·∫±ng Mean")
    elif method == "Thay th·∫ø b·∫±ng Median":
        df[selected_col].fillna(df[selected_col].median(), inplace=True)
        st.success(f"ƒê√£ thay th·∫ø gi√° tr·ªã thi·∫øu ·ªü c·ªôt '{selected_col}' b·∫±ng Median")
    elif method == "X√≥a gi√° tr·ªã thi·∫øu":
        df.dropna(subset=[selected_col], inplace=True)
        st.success(f"ƒê√£ x√≥a c√°c d√≤ng c√≥ gi√° tr·ªã thi·∫øu trong c·ªôt '{selected_col}'")

    return df



def chuyen_doi_kieu_du_lieu(df):
    st.subheader("Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")

    # Ch·ªâ l·∫•y c√°c c·ªôt ki·ªÉu object (chu·ªói) ƒë·ªÉ x·ª≠ l√Ω
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

    if not categorical_cols:
        st.success("Kh√¥ng c√≥ thu·ªôc t√≠nh d·∫°ng chu·ªói c·∫ßn chuy·ªÉn ƒë·ªïi!")
        return df

    for col in categorical_cols:
        unique_values = df[col].unique()
        num_unique = len(unique_values)

        st.write(f"**C·ªôt `{col}` c√≥ {num_unique} gi√° tr·ªã duy nh·∫•t:** {unique_values}")

        if num_unique > 10:
            st.warning(f"C·ªôt `{col}` c√≥ h∆°n 10 gi√° tr·ªã duy nh·∫•t, c√≥ th·ªÉ kh√¥ng ph√π h·ª£p ƒë·ªÉ chuy·ªÉn ƒë·ªïi tr·ª±c ti·∫øp.")
        else:
            mapping_dict = {}
            for val in unique_values:
                new_val = st.text_input(f"Nh·∫≠p gi√° tr·ªã thay th·∫ø cho `{val}` trong c·ªôt `{col}`", key=f"{col}_{val}")
                mapping_dict[val] = new_val

            # Chuy·ªÉn ƒë·ªïi c·ªôt theo gi√° tr·ªã nh·∫≠p v√†o
            df[col] = df[col].map(lambda x: mapping_dict.get(x, x))

            st.success(f"ƒê√£ chuy·ªÉn ƒë·ªïi c·ªôt `{col}` v·ªõi c√°c gi√° tr·ªã: {mapping_dict}")

    return df
def chuan_hoa_du_lieu(df):
    st.subheader("Chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi StandardScaler")

    # L·ªçc c√°c c·ªôt s·ªë ƒë·ªÉ chu·∫©n h√≥a
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
    
    if not numerical_cols:
        st.success("Kh√¥ng c√≥ thu·ªôc t√≠nh d·∫°ng s·ªë c·∫ßn chu·∫©n h√≥a!")
        return df

    # Ch·ªçn c·ªôt s·ªë ƒë·ªÉ chu·∫©n h√≥a
    selected_cols = st.multiselect("Ch·ªçn c√°c c·ªôt s·ªë ƒë·ªÉ chu·∫©n h√≥a", numerical_cols)

    if selected_cols:
        scaler = StandardScaler()
        df[selected_cols] = scaler.fit_transform(df[selected_cols])
        st.success(f"ƒê√£ chu·∫©n h√≥a c√°c c·ªôt: {selected_cols}")

    return df


def hien_thi_ly_thuyet(df):
    st.subheader("üìå 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
    st.write(df.head(10))

                # Ki·ªÉm tra l·ªói d·ªØ li·ªáu
    st.subheader("üö® Ki·ªÉm tra l·ªói d·ªØ li·ªáu")

                # Ki·ªÉm tra gi√° tr·ªã thi·∫øu
    missing_values = df.isnull().sum()

                # Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
    duplicate_count = df.duplicated().sum()

                
                
                # Ki·ªÉm tra gi√° tr·ªã qu√° l·ªõn (outlier) b·∫±ng Z-score
    outlier_count = {
        col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
        for col in df.select_dtypes(include=['number']).columns
    }

                # T·∫°o b√°o c√°o l·ªói
    error_report = pd.DataFrame({
        'C·ªôt': df.columns,
        'Gi√° tr·ªã thi·∫øu': missing_values,
        'Outlier': [outlier_count.get(col, 0) for col in df.columns]
    })

                # Hi·ªÉn th·ªã b√°o c√°o l·ªói
    st.table(error_report)

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr√πng l·∫∑p
    st.write(f"üîÅ **S·ªë l∆∞·ª£ng d√≤ng b·ªã tr√πng l·∫∑p:** {duplicate_count}")            
   
    
    st.title("üîç Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
    st.subheader("üìå 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
    st.write(df.head(10))
    st.header("‚öôÔ∏è C√°c b∆∞·ªõc ch√≠nh trong ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
    st.subheader("1Ô∏è‚É£ Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt")
    st.write("""
        M·ªôt s·ªë c·ªôt trong d·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ d·ª± ƒëo√°n ho·∫∑c ch·ª©a qu√° nhi·ªÅu gi√° tr·ªã thi·∫øu. Ch√∫ng ta s·∫Ω lo·∫°i b·ªè c√°c c·ªôt nh∆∞:
        - **Cabin**: C·ªôt n√†y c√≥ qu√° nhi·ªÅu gi√° tr·ªã b·ªã thi·∫øu.
        - **Ticket**: M√£ v√© kh√¥ng mang nhi·ªÅu th√¥ng tin h·ªØu √≠ch.
        - **Name**:  Kh√¥ng c·∫ßn thi·∫øt cho b√†i to√°n d·ª± ƒëo√°n s·ªëng s√≥t.
        ```python
            columns_to_drop = ["Cabin", "Ticket", "Name"]  
            df.drop(columns=columns_to_drop, inplace=True)
        ```
        """)
    drop(df)
    st.subheader("2Ô∏è‚É£ X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")
    st.write("""
        D·ªØ li·ªáu th·ª±c t·∫ø th∆∞·ªùng c√≥ gi√° tr·ªã b·ªã thi·∫øu. Ta c·∫ßn x·ª≠ l√Ω ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh.
        - **C·ªôt "Age"**: ƒêi·ªÅn gi√° tr·ªã trung b√¨nh v√¨ ƒë√¢y l√† d·ªØ li·ªáu s·ªë.
        - **C·ªôt "Fare"**: ƒêi·ªÅn gi√° tr·ªã trung v·ªã ƒë·ªÉ gi·∫£m ·∫£nh h∆∞·ªüng c·ªßa ngo·∫°i lai.
        - **C·ªôt "Embarked"**:   X√≥a c√°c d√≤ng b·ªã thi·∫øu v√¨ s·ªë l∆∞·ª£ng √≠t.
        ```python
            df["Age"].fillna(df["Age"].mean(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung b√¨nh cho "Age"
            df["Fare"].fillna(df["Fare"].median(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung v·ªã cho "Fare"
            df.dropna(subset=["Embarked"], inplace=True)  # X√≥a d√≤ng thi·∫øu "Embarked"

        ```
        """)
    xu_ly_gia_tri_thieu(df)

    st.subheader("3Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    st.write("""
        Trong d·ªØ li·ªáu, c√≥ m·ªôt s·ªë c·ªôt ch·ª©a gi√° tr·ªã d·∫°ng ch·ªØ (category). Ta c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh d·∫°ng s·ªë ƒë·ªÉ m√¥ h√¨nh c√≥ th·ªÉ x·ª≠ l√Ω.
        - **C·ªôt "Sex"**: Chuy·ªÉn th√†nh 1 (Nam), 0 (N·ªØ).
        - **C·ªôt "Embarked"**:   D√πng One-Hot Encoding ƒë·ªÉ t·∫°o c√°c c·ªôt m·ªõi cho t·ª´ng gi√° tr·ªã ("S", "C", "Q").
        ```python
            df["Sex"] = df["Sex"].map({"male": 1, "female": 0})  # M√£ h√≥a gi·ªõi t√≠nh
            df = pd.get_dummies(df, columns=["Embarked"], drop_first=True)  # One-Hot Encoding


        ```
        """)

    chuyen_doi_kieu_du_lieu(df)

    st.subheader("4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë")
    st.write("""
        C√°c gi√° tr·ªã s·ªë c√≥ th·ªÉ c√≥ kho·∫£ng gi√° tr·ªã kh√°c nhau, l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh. Ta s·∫Ω chu·∫©n h√≥a "Age" v√† "Fare" v·ªÅ c√πng m·ªôt thang ƒëo b·∫±ng StandardScaler.
        ```python
            scaler = StandardScaler()
            df[["Age", "Fare"]] = scaler.fit_transform(df[["Age", "Fare"]])

        ```
        """)

    
    chuan_hoa_du_lieu(df)
    
    st.subheader("5Ô∏è‚É£ Chia d·ªØ li·ªáu th√†nh t·∫≠p Train, Validation, v√† Test")
    st.write("""
        D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh ba ph·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o m√¥ h√¨nh t·ªïng qu√°t t·ªët:
        - **70%**: ƒë·ªÉ train m√¥ h√¨nh.
        - **15%**: ƒë·ªÉ validation, d√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh tham s·ªë.
        - **15%"**:   ƒë·ªÉ test, ƒë√°nh gi√° hi·ªáu su·∫•t th·ª±c t·∫ø.
        ```python
            # Chia d·ªØ li·ªáu theo t·ª∑ l·ªá 70% v√† 30% (train - temp)
            X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)

            # Chia ti·∫øp 30% th√†nh 15% validation v√† 15% test
            X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

        ```
        """)
       
    train_test_size(df)
    

def tien_xu_ly_du_lieu():
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file d·ªØ li·ªáu (.csv ho·∫∑c .txt)", type=["csv", "txt"])

    
    df = pd.read_csv(uploaded_file, delimiter=",")
    hien_thi_ly_thuyet(df)
    if "Age" in df.columns:
        df["Age"].fillna(df["Age"].mean(), inplace=True)
        df['Age'] = df['Age'].astype(int)
        scaler = StandardScaler()
        df[['Age']] = scaler.fit_transform(df[['Age']])
                    
    if "Fare" in df.columns:
        df["Fare"].fillna(df["Fare"].median(), inplace=True)  # ƒêi·ªÅn gi√° tr·ªã trung v·ªã
        df['Fare'] = df['Fare'].astype(int)
    if "Embarked" in df.columns:
        df.dropna(subset=['Embarked'], inplace=True)
        df['Embarked'] = df['Embarked'].map({'C': 1, 'S': 2,'Q': 3})
    if "Cabin" in df.columns:
        df['Cabin'].fillna('Unknown', inplace=True)

    if "Pclass" in df.columns:
        df['Pclass'] = df['Pclass'].astype('category')

                
    if "Sex" in df.columns:
        df['Sex'] = df['Sex'].map({'male': 1, 'female': 0})
                
    if "Fare" in df.columns and df['Fare'].nunique() > 1:
        scaler = StandardScaler()
        df[['Fare']] = scaler.fit_transform(df[['Fare']])

                # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi x·ª≠ l√Ω
        st.subheader("‚úÖ D·ªØ li·ªáu sau x·ª≠ l√Ω")
        st.write(df.head(10))   
    
        


            
  

if __name__ == "__main__":
    tien_xu_ly_du_lieu(df)
