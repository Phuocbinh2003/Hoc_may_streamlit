import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import mlflow
import mlflow.sklearn
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from streamlit_drawable_canvas import st_canvas
from PIL import Image, ImageOps

# Kh·ªüi t·∫°o MLflow
# mlflow.set_tracking_uri("sqlite:///mlruns.db")  # L∆∞u tr·ªØ local
# mlflow.set_experiment("MNIST Classification")

# Load d·ªØ li·ªáu MNIST
digits = datasets.load_digits()
X, y = digits.data, digits.target

# Chia t·∫≠p train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def Classification():
    st.title("üñäÔ∏è MNIST Classification App")

    ### **Ph·∫ßn 1: Hi·ªÉn th·ªã d·ªØ li·ªáu MNIST**
    st.header("üìä M·ªôt s·ªë h√¨nh ·∫£nh trong t·∫≠p MNIST")
    fig, axes = plt.subplots(2, 5, figsize=(10, 5))
    for i, ax in enumerate(axes.flatten()):
        ax.imshow(X[i].reshape(8, 8), cmap="gray")
        ax.set_title(f"S·ªë {y[i]}")
        ax.axis("off")
    st.pyplot(fig)

    ### **Ph·∫ßn 2: Tr√¨nh b√†y l√Ω thuy·∫øt v·ªÅ Decision Tree & SVM**
    st.header("üìñ L√Ω thuy·∫øt v·ªÅ m√¥ h√¨nh")
    st.subheader("1Ô∏è‚É£ Decision Tree")
    st.write("""
    - **Decision Tree** ho·∫°t ƒë·ªông b·∫±ng c√°ch chia nh·ªè d·ªØ li·ªáu theo c√°c ƒëi·ªÅu ki·ªán ƒë·ªÉ ph√¢n lo·∫°i ch√≠nh x√°c.  
    - M√¥ h√¨nh c√≥ th·ªÉ d·ªÖ hi·ªÉu nh∆∞ng d·ªÖ b·ªã overfitting n·∫øu kh√¥ng gi·ªõi h·∫°n ƒë·ªô s√¢u.
    """)

    st.subheader("2Ô∏è‚É£ SVM (Support Vector Machine)")
    st.write("""
    - **SVM** t√¨m m·ªôt si√™u ph·∫≥ng ƒë·ªÉ ph√¢n t√°ch d·ªØ li·ªáu m·ªôt c√°ch t·ªëi ∆∞u.  
    - SVM hi·ªáu qu·∫£ tr√™n d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ng c√≥ th·ªÉ ch·∫≠m tr√™n d·ªØ li·ªáu l·ªõn.
    """)

    ### **Ph·∫ßn 3: Ch·ªçn m√¥ h√¨nh & Train**
    st.header("‚öôÔ∏è Ch·ªçn m√¥ h√¨nh & Hu·∫•n luy·ªán")

    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["Decision Tree", "SVM"])

    if model_choice == "Decision Tree":
        max_depth = st.slider("max_depth", 1, 20, 5)
        model = DecisionTreeClassifier(max_depth=max_depth)
    elif model_choice == "SVM":
        C = st.slider("C (Regularization)", 0.1, 10.0, 1.0)
        kernel = st.selectbox("Kernel", ["linear", "rbf", "poly", "sigmoid"])
        model = SVC(C=C, kernel=kernel)

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        st.success(f"‚úÖ ƒê·ªô ch√≠nh x√°c: {acc:.4f}")

        # L∆∞u k·∫øt qu·∫£ v√†o MLflow
        with mlflow.start_run():
            mlflow.log_param("model", model_choice)
            if model_choice == "Decision Tree":
                mlflow.log_param("max_depth", max_depth)
            else:
                mlflow.log_param("C", C)
                mlflow.log_param("kernel", kernel)
            mlflow.log_metric("accuracy", acc)
            mlflow.sklearn.log_model(model, model_choice)

    ### **Ph·∫ßn 4: V·∫Ω s·ªë & D·ª± ƒëo√°n**
    st.header("‚úçÔ∏è V·∫Ω s·ªë ƒë·ªÉ d·ª± ƒëo√°n")

    canvas_result = st_canvas(
        fill_color="black",
        stroke_width=10,
        stroke_color="white",
        background_color="black",
        height=150,
        width=150,
        drawing_mode="freedraw",
        key="canvas"
    )

    if st.button("D·ª± ƒëo√°n s·ªë"):
        if canvas_result.image_data is not None:
            img = Image.fromarray((canvas_result.image_data[:, :, 0]).astype(np.uint8))
            img = img.resize((8, 8)).convert("L")
            img = ImageOps.invert(img)
            img = np.array(img).reshape(1, -1)

            # D·ª± ƒëo√°n
            prediction = model.predict(img)
            st.subheader(f"üî¢ D·ª± ƒëo√°n: {prediction[0]}")
            
if __name__ == "__main__":
    Classification()